/*
Argon2id-WASM v2.0.0
https://github.com/Rabbit-Company/Argon2id-WASM
License: ???
*/

var F=function(){if(k===null||k.byteLength===0)k=new Uint8Array(P.memory.buffer);return k},j=function(q,B){return q=q>>>0,V.decode(F().subarray(q,q+B))},x=function(q){if(z===X.length)X.push(X.length+1);const B=z;return z=X[B],X[B]=q,B},R=function(q,B,G){if(G===void 0){const Q=A.encode(q),Z=B(Q.length,1)>>>0;return F().subarray(Z,Z+Q.length).set(Q),v=Q.length,Z}let J=q.length,Y=B(J,1)>>>0;const C=F();let K=0;for(;K<J;K++){const Q=q.charCodeAt(K);if(Q>127)break;C[Y+K]=Q}if(K!==J){if(K!==0)q=q.slice(K);Y=G(Y,J,J=K+q.length*3,1)>>>0;const Q=F().subarray(Y+K,Y+J),Z=w(q,Q);K+=Z.written}return v=K,Y},D=function(){if(H===null||H.byteLength===0)H=new Int32Array(P.memory.buffer);return H},h=function(q){return X[q]},f=function(q){if(q<132)return;X[q]=z,z=q},u=function(q){const B=h(q);return f(q),B};function O(q,B,G,J,Y,C){let K,Q;try{const $=P.__wbindgen_add_to_stack_pointer(-16),T=R(q,P.__wbindgen_malloc,P.__wbindgen_realloc),b=v,M=R(B,P.__wbindgen_malloc,P.__wbindgen_realloc),y=v;P.argon2id_hash($,T,b,M,y,G,J,Y,C);var Z=D()[$/4+0],I=D()[$/4+1],E=D()[$/4+2],S=D()[$/4+3],L=Z,N=I;if(S)throw L=0,N=0,u(E);return K=L,Q=N,j(L,N)}finally{P.__wbindgen_add_to_stack_pointer(16),P.__wbindgen_free(K,Q,1)}}async function _(q,B){if(typeof Response==="function"&&q instanceof Response){if(typeof WebAssembly.instantiateStreaming==="function")try{return await WebAssembly.instantiateStreaming(q,B)}catch(J){if(q.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",J);else throw J}const G=await q.arrayBuffer();return await WebAssembly.instantiate(G,B)}else{const G=await WebAssembly.instantiate(q,B);if(G instanceof WebAssembly.Instance)return{instance:G,module:q};else return G}}var g=function(){const q={};return q.wbg={},q.wbg.__wbindgen_string_new=function(B,G){const J=j(B,G);return x(J)},q},c=function(q,B){},l=function(q,B){return P=q.exports,U.__wbindgen_wasm_module=B,H=null,k=null,P};async function U(q){if(P!==void 0)return P;if(typeof q==="undefined")q=new URL("argon2id_wasm_bg.wasm",import.meta.url);const B=g();if(typeof q==="string"||typeof Request==="function"&&q instanceof Request||typeof URL==="function"&&q instanceof URL)q=fetch(q);c(B);const{instance:G,module:J}=await _(await q,B);return l(G,J)}var P,V=typeof TextDecoder!=="undefined"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};if(typeof TextDecoder!=="undefined")V.decode();var k=null,X=new Array(128).fill(void 0);X.push(void 0,null,!0,!1);var z=X.length,v=0,A=typeof TextEncoder!=="undefined"?new TextEncoder("utf-8"):{encode:()=>{throw Error("TextEncoder not available")}},w=typeof A.encodeInto==="function"?function(q,B){return A.encodeInto(q,B)}:function(q,B){const G=A.encode(q);return B.set(G),{read:q.length,written:G.length}},H=null;var W=U;onmessage=(q)=>{W().then(()=>{postMessage({output:O(q.data[0],q.data[1],q.data[2],q.data[3],q.data[4],q.data[5])})}).catch((B)=>{postMessage({error:B})})};
